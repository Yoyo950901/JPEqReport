# -*- coding: utf-8 -*-
from asyncore import write
import time
import requests
import urllib3
import os
from pref import *
urllib3.disable_warnings()

url = "https://api.p2pquake.net/v1/human-readable?limit=100"

# data = requests.get(url, verify=False).json()[0]

# if data["code"] != (551):
#     exit()

data = requests.get(url, verify=False).json()

# {'石狩地方北部': '石狩北部', '石狩地方中部': '石狩中部', '石狩地方南部': '石狩南部', '後志地方北部': '後志北部', '後志地方東部': '後志東部', '後志地方西部': '後志西部', '空知地方北部': '空知北部', '空知地方中部': '空知中部', '空知地方南部': '空知南部', '渡島地方北部': '渡島北部', '渡島地方東部': '渡島東部', '渡島地方西部': '渡島西部', '檜山地方': '檜山地方', '北海道奥尻島': '奥尻島', '胆振地方西部': '胆振西部', '胆振地方中東部': '胆振中東部', '日高地方西部': '日高西部', '日高地方中部': '日高中部', '日高地方東部': '日高東部', '上川地方北部': '上川北部', '上川地方中部': '上川中部', '上川地方南部': '上川南部', '留萌地方中北部': '留萌中北部', '留萌地方南部': '留萌南部', '宗谷地方北部': '宗谷北部', '宗谷地方南部': '宗谷南部', '北海道利尻礼文': '利尻礼文', '網走地方': '網走地方', '北見地方': '北見地方', '紋別地方': '紋別地方', '十勝地方北部': '十勝北部', '十勝地方中部': '十勝中部', '十勝地方南部': '十勝南部', '釧路地方北部': '釧路北部', '釧路地方中南部': '釧路中南部', '根室地方北部': '根室北部', '根室地方中部': '根室中部', '根室地方南部': '根室南部', '青森県津軽北部': '青森津軽北部', '青森県津軽南部': '青森津軽南部', '青森県三八上北地方': '青森三八上北', '青森県下北地方': '青森下北', '岩手県沿岸北部': '岩手沿岸北部', '岩手県沿岸南部': '岩手沿岸南部', '岩手県内陸北部': '岩手内陸北部', '岩手県内陸南部': '岩手内陸南部', '宮城県北部': '宮城北部', '宮城県中部': '宮城中部', '宮城県南部': '宮城南部', '秋田県沿岸北部': '秋田沿岸北部', '秋田県沿岸南部': '秋田沿岸南部', '秋田県内陸北部': '秋田内陸北部', '秋田県内陸南部': '秋田内陸南部', '山形県庄内地方': '庄内地方', '山形県最上地方': '最上地方', '山形県村山地方': '村山地方', '山形県置賜地方': '置賜地方', '福島県中通り': '福島中通り', '福島県浜通り': '福島浜通り', '福島県会津': '会津', '茨城県北部': '茨城北部', '茨城県南部': '茨城南部', '栃木県北部': '栃木北部', '栃木県南部': '栃木南部', '群馬県北部': '群馬北部', '群馬県南部': '群馬南部', '埼玉県北部': '埼玉北部', '埼玉県南部': '埼玉南部', '埼玉県秩父地方': '秩父地方', '千葉県北東部': '千葉北東部', '千葉県北西部': '千葉北西部', '千葉県南部': '千葉南部', '神奈川県東部': '神奈川東部', '神奈川県西部': '神奈川西部', '東京都２３区': '東京２３区', '東京都多摩東部': '東京多摩東部', '東京都多摩西部': '東京多摩西部', '伊豆大島': '伊豆大島', '新島': '新島', '神津島': '神津島', '三宅島': '三宅島', '八丈島': '八丈島', '小笠原': '小笠原', '新潟県上越地方': '新潟上越地方', '新潟県中越地方': '新潟中越地方', '新潟県下越地方': '新潟下越地方', '新潟県佐渡地方': '佐渡', '富山県東部': '富山東部', '富山県西部': '富山西部', '石川県能登地方': '能登地方', '石川県加賀地方': '加賀地方', '福井県嶺北': '福井嶺北地方', '福井県嶺南': '福井嶺南地方', '山梨県東部・富士五湖': '山梨東部・富士五湖', '山梨県中・西部': '山梨中・西部', '長野県北部': '長野北部', '長野県中部': '長野中部', '長野県南部': '長野南部', '岐阜県飛騨地方': '飛騨地方', '岐阜県美濃東部': '美濃東部', '岐阜県美濃中西部': '美濃中西部', '静岡県伊豆地方': '伊豆地方', '静岡県東部': '静岡東部', '静岡県中部': '静岡中部', '静岡県西部': '静岡西部', '愛知県東部': '愛知東部', '愛知県西部': '愛知西部', '三重県北部': '三重北部', '三重県中部': '三重中部', '三重県南部': '三重南部', '滋賀県北部': '滋賀北部', '滋賀県南部': '滋賀南部', '京都府北部': '京都北部', '京都府南部': '京都南部', '大阪府北部': '大阪北部', '大阪府南部': '大阪南部', '兵庫県北部': '兵庫北部', '兵庫県南東部': '兵庫南東部', '兵庫県南西部': '兵庫南西部', '兵庫県淡路島': '淡路島', '奈良県': '奈良県', '和歌山県北部': '和歌山北部', '和歌山県南部': '和歌山南部', '鳥取県東部': '鳥取東部', '鳥取県中部': '鳥取中部', '鳥取県西部': '鳥取西部', '島根県東部': '島根東部', '島根県西部': '島根西部', '島根県隠岐地方': '隠岐', '岡山県北部': '岡山北部', '岡山県南部': '岡山南部', '広島県北部': '広島北部', '広島県南東部': '広島南東部', '広島県南西部': '広島南西部', '山口県北部': '山口北部', '山口県東部': '山口東部', '山口県中部': '山口中部', '山口県西部': '山口西部', '徳島県北部': '徳島北部', '徳島県南部': '徳島南部', '香川県東部': '香川東部', '香川県西部': '香川西部', '愛媛県東予': '愛媛東予', '愛媛県中予': '愛媛中予', '愛媛県南予': '愛媛南予', '高知県東部': '高知東部', '高知県中部': '高知中部', '高知県西部': '高知西部', '福岡県福岡地方': '福岡地方', '福岡県北九州地方': '北九州地方', '福岡県筑豊地方': '筑豊地方', '福岡県筑後地方': '筑後地方', '佐賀県北部': '佐賀北部', '佐賀県南部': '佐賀南部', '長崎県北部': '長崎北部', '長崎県南西部': '長崎南西部', '長崎県島原半島': '島原半島', '長崎県対馬地方': '対馬', '長崎県壱岐地方': '壱岐', '長崎県五島地方': '五島', '熊本県阿蘇地方': '阿蘇地方', '熊本県熊本地方': '熊本地方', '熊本県球磨地方': '球磨地方', '熊本県天草・芦北地方': '天草・芦北', '大分県北部': '大分北部', '大分県中部': '大分中部', '大分県南部': '大分南部', '大分県西部': '大分西部', '宮崎県北部平野部': '宮崎北部平野部', '宮崎県北部山沿い': '宮崎北部山沿い', '宮崎県南部平野部': '宮崎南部平野部', '宮崎県南部山沿い': '宮崎南部山沿い', '鹿児島県薩摩地方': '薩摩地方', '鹿児島県大隅地方': '大隅地方', '鹿児島県十島村': '十島村', '鹿児島県甑島': '甑島', '鹿児島県種子島': '種子島', '鹿児島県屋久島': '屋久島', '鹿児島県奄美北部': '奄美北部', '鹿児島県奄美南部': '奄美南部', '沖縄県本島北部': '沖縄本島北部', '沖縄県本島中南部': '沖縄本島中南部', '沖縄県久米島': '久米島', '沖縄県大東島': '大東島', '沖縄県宮古島': '宮古島', '沖縄県石垣島': '石垣島', '沖縄県与那国島': '与那国島', '沖縄県西表島': '西表島'}
# [{'原本': '石狩地方北部', '精簡': '石狩北部'}, {'原本': '石狩地方中部', '精簡': '石狩中部'}, {'原本': '石狩地方南部', '精簡': '石狩南部'}, {'原本': '後志地方北部', '精簡': '後志北部'}, {'原本': '後志地方東部', '精簡': '後志東部'}, {'原本': '後志地方西部', '精簡': '後志西部'}, {'原本': '空知地方北部', '精簡': '空知北部'}, {'原本': '空知地方中部', '精簡': '空知中部'}, {'原本': '空知地方南部', '精簡': '空知南部'}, {'原本': '渡島地方北部', '精簡': '渡島北部'}, {'原本': '渡島地方東部', '精簡': '渡島東部'}, {'原本': '渡島地方西部', '精簡': '渡島西部'}, {'原本': '檜山地方', '精簡': '檜山地方'}, {'原本': '北海道奥尻島', '精簡': '奥尻島'}, {'原本': '胆振地方西部', '精簡': '胆振西部'}, {'原本': '胆振地方中東部', '精簡': '胆振中東部'}, {'原本': '日高地方西部', '精簡': '日高西部'}, {'原本': '日高地方中部', '精簡': '日高中部'}, {'原本': '日高地方東部', '精簡': '日高東部'}, {'原本': '上川地方北部', '精簡': '上川北部'}, {'原本': '上川地方中部', '精簡': '上川中部'}, {'原本': '上川地方南部', '精簡': '上川南部'}, {'原本': '留萌地方中北部', '精簡': '留萌中北部'}, {'原本': '留萌地方南部', '精簡': '留萌南部'}, {'原本': '宗谷地方北部', '精簡': '宗谷北部'}, {'原本': '宗谷地方南部', '精簡': '宗谷南部'}, {'原本': '北海道利尻礼文', '精簡': '利尻礼文'}, {'原本': '網走地方', '精簡': '網走地方'}, {'原本': '北見地方', '精簡': '北見地方'}, {'原本': '紋別地方', '精簡': '紋別地方'}, {'原本': '十勝地方北部', '精簡': '十勝北部'}, {'原本': '十勝地方中部', '精簡': '十勝中部'}, {'原本': '十勝地方南部', '精簡': '十勝南部'}, {'原本': '釧路地方北部', '精簡': '釧路北部'}, {'原本': '釧路地方中南部', '精簡': '釧路中南部'}, {'原本': '根室地方北部', '精簡': '根室北部'}, {'原本': '根室地方中部', '精簡': '根室中部'}, {'原本': '根室地方南部', '精簡': '根室南部'}, {'原本': '青森県津軽北部', '精簡': '青森津軽北部'}, {'原本': '青森県津軽南部', '精簡': '青森津軽南部'}, {'原本': '青森県三八上北地方', '精簡': '青森三八上北'}, {'原本': '青森県下北地方', '精簡': '青森下北'}, {'原本': '岩手県沿岸北部', '精簡': '岩手沿岸北部'}, {'原本': '岩手県沿岸南部', '精簡': '岩手沿岸南部'}, {'原本': '岩手県内陸北部', '精簡': '岩手内陸北部'}, {'原本': '岩手県内陸南部', '精簡': '岩手内陸南部'}, {'原本': '宮城県北部', '精簡': '宮城北部'}, {'原本': '宮城県中部', '精簡': '宮城中部'}, {'原本': '宮城県南部', '精簡': '宮城南部'}, {'原本': '秋田県沿岸北部', '精簡': '秋田沿岸北部'}, {'原本': '秋田県沿岸南部', '精簡': '秋田沿岸南部'}, {'原本': '秋田県内陸北部', '精簡': '秋田内陸北部'}, {'原本': '秋田県内陸南部', '精簡': '秋田内陸南部'}, {'原本': '山形県庄内地方', '精簡': '庄内地方'}, {'原本': '山形県最上地方', '精簡': '最上地方'}, {'原本': '山形県村山地方', '精簡': '村山地方'}, {'原本': '山形県置賜地方', '精簡': '置賜地方'}, {'原本': '福島県中通り', '精簡': '福島中通り'}, {'原本': '福島県浜通り', '精簡': '福島浜通り'}, {'原本': '福島県会津', '精簡': '福島会津'}, {'原本': '茨城県北部', '精簡': '茨城北部'}, {'原本': '茨城県南部', '精簡': '茨城南部'}, {'原本': '栃木県北部', '精簡': '栃木北部'}, {'原本': '栃木県南部', '精簡': '栃木南部'}, {'原本': '群馬県北部', '精簡': '群馬北部'}, {'原本': '群馬県南部', '精簡': '群馬南部'}, {'原本': '埼玉県北部', '精簡': '埼玉北部'}, {'原本': '埼玉県南部', '精簡': '埼玉南部'}, {'原本': '埼玉県秩父地方', '精簡': '秩父地方'}, {'原本': '千葉県北東部', '精簡': '千葉北東部'}, {'原本': '千葉県北西部', '精簡': '千葉北西部'}, {'原本': '千葉県南部', '精簡': '千葉南部'}, {'原本': '神奈川県東部', '精簡': '神奈川東部'}, {'原本': '神奈川県西部', '精簡': '神奈川西部'}, {'原本': '東京都２３区', '精簡': '東京２３区'}, {'原本': '東京都多摩東部', '精簡': '東京多摩東部'}, {'原本': '東京都多摩西部', '精簡': '東京多摩西部'}, {'原本': '伊豆大島', '精簡': '伊豆大島'}, {'原本': '新島', '精簡': '新島'}, {'原本': '神津島', '精簡': '神津島'}, {'原本': '三宅島', '精簡': '三宅島'}, {'原本': '八丈島', '精簡': '八丈島'}, {'原本': '小笠原', '精簡': '小笠原'}, {'原本': '新潟県上越地方', '精簡': '新潟上越地方'}, {'原本': '新潟県中越地方', '精簡': '新潟中越地方'}, {'原本': '新潟県下越地方', '精簡': '新潟下越地方'}, {'原本': '新潟県佐渡地方', '精簡': '佐渡'}, {'原本': '富山県東部', '精簡': '富山東部'}, {'原本': '富山県西部', '精簡': '富山西部'}, {'原本': '石川県能登地方', '精簡': '能登地方'}, {'原本': '石川県加賀地方', '精簡': '加賀地方'}, {'原本': '福井県嶺北', '精簡': '福井嶺北地方'}, {'原本': '福井県嶺南', '精簡': '福井嶺南地方'}, {'原本': '山梨県東部・富士五湖', '精簡': '山梨東部・富士五湖'}, {'原本': '山梨県中・西部', '精簡': '山梨中・西部'}, {'原本': '長野県北部', '精簡': '長野北部'}, {'原本': '長野県中部', '精簡': '長野中部'}, {'原本': '長野県南部', '精簡': '長野南部'}, {'原本': '岐阜県飛騨地方', '精簡': '飛騨地方'}, {'原本': '岐阜県美濃東部', '精簡': '美濃東部'}, {'原本': '岐阜県美濃中西部', '精簡': '美濃中西部'}, {'原本': '静岡県伊豆地方', '精簡': '伊豆地方'}, {'原本': '静岡県東部', '精簡': '静岡東部'}, {'原本': '静岡県中部', '精簡': '静岡中部'}, {'原本': '静岡県西部', '精簡': '静岡西部'}, {'原本': '愛知県東部', '精簡': '愛知東部'}, {'原本': '愛知県西部', '精簡': '愛知西部'}, {'原本': '三重県北部', '精簡': '三重北部'}, {'原本': '三重県中部', '精簡': '三重中部'}, {'原本': '三重県南部', '精簡': '三重南部'}, {'原本': '滋賀県北部', '精簡': '滋賀北部'}, {'原本': '滋賀県南部', '精簡': '滋賀南部'}, {'原本': '京都府北部', '精簡': '京都北部'}, {'原本': '京都府南部', '精簡': '京都南部'}, {'原本': '大阪府北部', '精簡': '大阪北部'}, {'原本': '大阪府南部', '精簡': '大阪南部'}, {'原本': '兵庫県北部', '精簡': '兵庫北部'}, {'原本': '兵庫県南東部', '精簡': '兵庫南東部'}, {'原本': '兵庫県南西部', '精簡': '兵庫南西部'}, {'原本': '兵庫県淡路島', '精簡': '淡路島'}, {'原本': '奈良県', '精簡': '奈良県'}, {'原本': '和歌山県北部', '精簡': '和歌山北部'}, {'原本': '和歌山県南部', '精簡': '和歌山南部'}, {'原本': '鳥取県東部', '精簡': '鳥取東部'}, {'原本': '鳥取県中部', '精簡': '鳥取中部'}, {'原本': '鳥取県西部', '精簡': '鳥取西部'}, {'原本': '島根県東部', '精簡': '島根東部'}, {'原本': '島根県西部', '精簡': '島根西部'}, {'原本': '島根県隠岐地方', '精簡': '隠岐'}, {'原本': '岡山県北部', '精簡': '岡山北部'}, {'原本': '岡山県南部', '精簡': '岡山南部'}, {'原本': '広島県北部', '精簡': '広島北部'}, {'原本': '広島県南東部', '精簡': '広島南東部'}, {'原本': '広島県南西部', '精簡': '広島南西部'}, {'原本': '山口県北部', '精簡': '山口北部'}, {'原本': '山口県東部', '精簡': '山口東部'}, {'原本': '山口県中部', '精簡': '山口中部'}, {'原本': '山口県西部', '精簡': '山口西部'}, {'原本': '徳島県北部', '精簡': '徳島北部'}, {'原本': '徳島県南部', '精簡': '徳島南部'}, {'原本': '香川県東部', '精簡': '香川東部'}, {'原本': '香川県西部', '精簡': '香川西部'}, {'原本': '愛媛県東予', '精簡': '愛媛東予'}, {'原本': '愛媛県中予', '精簡': '愛媛中予'}, {'原本': '愛媛県南予', '精簡': '愛媛南予'}, {'原本': '高知県東部', '精簡': '高知東部'}, {'原本': '高知県中部', '精簡': '高知中部'}, {'原本': '高知県西部', '精簡': '高知西部'}, {'原本': '福岡県福岡地方', '精簡': '福岡地方'}, {'原本': '福岡県北九州地方', '精簡': '北九州地方'}, {'原本': '福岡県筑豊地方', '精簡': '筑豊地方'}, {'原本': '福岡県筑後地方', '精簡': '筑後地方'}, {'原本': '佐賀県北部', '精簡': '佐賀北部'}, {'原本': '佐賀県南部', '精簡': '佐賀南部'}, {'原本': '長崎県北部', '精簡': '長崎北部'}, {'原本': '長崎県南西部', '精簡': '長崎南西部'}, {'原本': '長崎県島原半島', '精簡': '島原半島'}, {'原本': '長崎県対馬地方', '精簡': '対馬'}, {'原本': '長崎県壱岐地方', '精簡': '壱岐'}, {'原本': '長崎県五島地方', '精簡': '五島'}, {'原本': '熊本県阿蘇地方', '精簡': '阿蘇地方'}, {'原本': '熊本県熊本地方', '精簡': '熊本地方'}, {'原本': '熊本県球磨地方', '精簡': '球磨地方'}, {'原本': '熊本県天草・芦北地方', '精簡': '天草・芦北'}, {'原本': '大分県北部', '精簡': '大分北部'}, {'原本': '大分県中部', '精簡': '大分中部'}, {'原本': '大分県南部', '精簡': '大分南部'}, {'原本': '大分県西部', '精簡': '大分西部'}, {'原本': '宮崎県北部平野部', '精簡': '宮崎北部平野部'}, {'原本': '宮崎県北部山沿い', '精簡': '宮崎北部山沿い'}, {'原本': '宮崎県南部平野部', '精簡': '宮崎南部平野部'}, {'原本': '宮崎県南部山沿い', '精簡': '宮崎南部山沿い'}, {'原本': '鹿児島県薩摩地方', '精簡': '薩摩地方'}, {'原本': '鹿児島県大隅地方', '精簡': '大隅地方'}, {'原本': '鹿児島県十島村', '精簡': '十島村'}, {'原本': '鹿児島県甑島', '精簡': '甑島'}, {'原本': '鹿児島県種子島', '精簡': '種子島'}, {'原本': '鹿児島県屋久島', '精簡': '屋久島'}, {'原本': '鹿児島県奄美北部', '精簡': '奄美北部'}, {'原本': '鹿児島県奄美南部', '精簡': '奄美南部'}, {'原本': '沖縄県本島北部', '精簡': '沖縄本島北部'}, {'原本': '沖縄県本島中南部', '精簡': '沖縄本島中南部'}, {'原本': '沖縄県久米島', '精簡': '久米島'}, {'原本': '沖縄県大東島', '精簡': '大東島'}, {'原本': '沖縄県宮古島', '精簡': '宮古島'}, {'原本': '沖縄県石垣島', '精簡': '石垣島'}, {'原本': '沖縄県与那国島', '精簡': '与那国島'}, {'原本': '沖縄県西表島', '精簡': '西表島'}]

a = 0
for i in range(10):
    if (data[a]["code"]) == (551):
        data = data[a]
        break
    elif a == 10:
        exit()
    else:
        a = a + 1
#判定資料是否為地震情報(震源情報、震度速報等)，否則判定下一筆，若最新10筆都不是則結束

logfile = open('log.txt', encoding="utf8")
logid1 = logfile.read()
logfile.close
#讀取上次情報ID
logid2 = data["_id"]["$oid"]
#讀取此次情報ID


if logid1 == logid2:
    exit()
#判定資料是否為重複



eq = data["earthquake"]
津波情報 = eq["domesticTsunami"]
深さ = (eq["hypocenter"]["depth"]).replace("km","キロ")
規模 = eq["hypocenter"]["magnitude"]
震源地= eq["hypocenter"]["name"]
最大震度 = eq["maxScale"]
発生日時 = eq["time"]
情報種類 = data["issue"]["type"]
震度 = data["points"]

#變數

if 最大震度 == 10:
    強さ = ("")
elif 最大震度 == 20:
    強さ = ("")
elif 最大震度 == 30:
    強さ = ("")
elif 最大震度 == 40:
    強さ = ("やや強い")
elif 最大震度 == 45:
    強さ = ("強い")
elif 最大震度 == 46:
    強さ = ("強い")
elif 最大震度 == 50:
    強さ = ("強い")
elif 最大震度 == 55:
    強さ = ("強い")
elif 最大震度 == 60:
    強さ = ("強い")
elif 最大震度 == 70:
    強さ = ("強い")
#判定最大震度


if 規模 == "-1.0":
    規模 = "不明"

if 深さ == "-1キロ":
    深さ = "不明"


発生日時 = (発生日時.split("日"))[1]
時 = int((発生日時.split("時"))[0])
分 = (発生日時.split("時"))[1]
if 時 < 12:
    午前後 = "午前"
else:
    時 = 時 - 12
    午前後 = "午後"

if 分[0:1] == "0":
    分 = 分.replace("0","",1)

発生日時 = 午前後 + str(時) + "時" + 分
print(発生日時)


a = 0
pref = ""
if 情報種類 == ("ScalePrompt"):
    for y in 震度:
        if 震度[a]["scale"] == eq["maxScale"]:
            for i in 地域:
                for j in i['list']:
                    if 震度[a]["addr"] == j:
                        pref+='・'+i['name']
        a = a + 1
pref = pref[1:]
#print(pref)

震度代碼= [70,60,55,50,45,46,40,30,20,10]
震度列表= ["震度７　","震度６強　","震度６弱　","震度５強　","震度５弱　","推定５弱　","震度４　","震度３　","震度２　","震度１　"]

    
def scale(y):
#各地震度函數
    a=0
    output = ""
    for i in 震度:
        if (震度[a]["scale"]) == 震度代碼[y]:
            output = output + 震度[a]["addr"] + "　"
        a=a+1
    #獲取完全資料以供下面分辨

    if 震度列表[y] + output[0:-1] != 震度列表[y]:
    #分辨震度是否有資料，若無跳過
    

        output=''
    #初始化正式迴圈
        a=0
        for i in 震度:
            if (震度[a]["scale"]) == 震度代碼[y]:
            #分離所需震度
                if 情報種類 == ("ScalePrompt"):
                    本次輸出 = output + 震度[a]["addr"].replace("県","").replace("府","").replace("東京都","東京").replace("新島","新島地方").replace("鹿児島","").replace("地方","").replace("檜山","檜山地方").replace("北海道","").replace("網走","網走地方").replace("北見","北見地方").replace("紋別","紋別地方").replace("青森津軽","津軽").replace("庄内","庄内地方").replace("最上","最上地方").replace("村山","村山地方").replace("置賜","置賜地方").replace("福島会津","会津").replace("埼玉秩父","秩父地方").replace("新潟上越","新潟上越地方").replace("新潟中越","新潟中越地方").replace("新潟下越","新潟下越地方").replace("新潟佐渡","佐渡地方").replace("石川能登","能登地方").replace("石川加賀","加賀地方").replace("福井嶺北","福井嶺北地方").replace("福井嶺南","福井嶺南地方").replace("岐阜飛騨","飛騨地方").replace("静岡地方","伊豆地方").replace("兵庫淡路島","淡路島").replace("奈良","奈良県").replace("島根隠岐","隠岐").replace("予","予地方").replace("福岡福岡","福岡地方").replace("福岡北九州","北九州地方").replace("福岡筑豊","筑豊地方").replace("福岡筑後","筑後地方").replace("長崎島原半島","島原半島").replace("長崎対馬","対馬").replace("長崎壱岐","壱岐").replace("長崎五島","五島").replace("熊本阿蘇","阿蘇地方").replace("熊本熊本","熊本地方").replace("熊本球磨","球磨地方").replace("熊本天草・芦北","天草・芦北").replace("薩摩","薩摩地方").replace("大隅","大隅地方").replace("沖縄","").replace("本島","沖縄本島") + "　"
                else:
                    本次輸出 = output + 震度[a]["addr"] + "　"

                字數=0
                for b in 本次輸出:
                    字數=字數+1
                #本次迴圈字數


                if 字數 > 31:
                    output = (震度列表[y]+output[0:-1])
                    f = open("output.txt", "w",encoding="utf8")
                    f.write(output)
                    f.close()
                    time.sleep(8)

                    logfile = open('log.txt', encoding="utf8")
                    logid3 = logfile.read()
                    logfile.close
                    if logid2 != logid3:
                        exit()
                    output=''
                if 情報種類 == ("ScalePrompt"):
                    output=output + 震度[a]["addr"].replace("県","").replace("府","").replace("東京都","東京").replace("新島","新島地方").replace("鹿児島","").replace("地方","").replace("檜山","檜山地方").replace("北海道","").replace("網走","網走地方").replace("北見","北見地方").replace("紋別","紋別地方").replace("青森津軽","津軽").replace("庄内","庄内地方").replace("最上","最上地方").replace("村山","村山地方").replace("置賜","置賜地方").replace("福島会津","会津").replace("埼玉秩父","秩父地方").replace("新潟上越","新潟上越地方").replace("新潟中越","新潟中越地方").replace("新潟下越","新潟下越地方").replace("新潟佐渡","佐渡地方").replace("石川能登","能登地方").replace("石川加賀","加賀地方").replace("福井嶺北","福井嶺北地方").replace("福井嶺南","福井嶺南地方").replace("岐阜飛騨","飛騨地方").replace("静岡地方","伊豆地方").replace("兵庫淡路島","淡路島").replace("奈良","奈良県").replace("島根隠岐","隠岐").replace("予","予地方").replace("福岡福岡","福岡地方").replace("福岡北九州","北九州地方").replace("福岡筑豊","筑豊地方").replace("福岡筑後","筑後地方").replace("長崎島原半島","島原半島").replace("長崎対馬","対馬").replace("長崎壱岐","壱岐").replace("長崎五島","五島").replace("熊本阿蘇","阿蘇地方").replace("熊本熊本","熊本地方").replace("熊本球磨","球磨地方").replace("熊本天草・芦北","天草・芦北").replace("薩摩","薩摩地方").replace("大隅","大隅地方").replace("沖縄","").replace("本島","沖縄本島") + "　"
                else:
                    output=output + 震度[a]["addr"] + "　"
            a=a+1
        output = 震度列表[y]+output[0:-1]
        print(output)
        f = open("output.txt", "w",encoding="utf8")
        f.write(output)
        f.close()
        time.sleep(8)

        logfile = open('log.txt', encoding="utf8")
        logid3 = logfile.read()
        logfile.close
        if logid2 != logid3:
            exit()



if 津波情報 == "None":
    津波情報 = "この地震による津波の心配はありません"
elif 津波情報 == "Unknown":
    津波情報 = "津波情報不明"
elif 津波情報 == "Checking":
    津波情報 = "津波の有無を調查中　念のため津波に注意してください"
elif 津波情報 == "NonEffective":
    津波情報 = "多少の潮位変動があるかもしれません　被害の心配はありません"
elif 津波情報 == "Watch":
    津波情報 = "津波注意報を発表中　海岸から離れてください"
elif 津波情報 == "Warning":
    津波情報 = "津波警報等を発表中　直ちに高台に避難してください"
#判定海嘯情報種類



'''
print(snd7)
print(snd6t)
print(snd6j)
print(snd5t)
print(snd5j)
print(snd5s)
print(snd4)
print(snd3)
print(snd2)
print(snd1)
'''

f = open("log.txt", "w",encoding="utf8")
f.write(data["_id"]["$oid"])
f.close()
#寫入情報ID

'''
情報種類
    ScalePrompt 震度速報
    Destination 震源に関する情報
    ScaleAndDestination 震度・震源に関する情報
    DetailScale 各地の震度に関する情報
    Foreign 遠地地震に関する情報
    Other その他の情報
'''

if 情報種類 == ("ScalePrompt") or 情報種類 == ("Destination"):
#如果是震度速報或震源情報，跑馬燈重複20次，其餘重複5次
    g = 20
else:
    g = 5


for i in range(g):

    if 情報種類 == ("DetailScale"):
        #地震情報(各地の震度)
        print("地震情報")

        output = ("地震情報")
        print(output)
        f = open("output.txt", "w",encoding="utf8")
        f.write(output)
        f.close()
        time.sleep(2)

        logfile = open('log.txt', encoding="utf8")
        logid3 = logfile.read()
        logfile.close
        if logid2 != logid3:
            exit()

        output = (発生日時 + "頃地震がありました")
        print(output)
        f = open("output.txt", "w",encoding="utf8")
        f.write(output)
        f.close()
        time.sleep(5)

        logfile = open('log.txt', encoding="utf8")
        logid3 = logfile.read()
        logfile.close
        if logid2 != logid3:
            exit()

        output = (津波情報)
        print(output)
        f = open("output.txt", "w",encoding="utf8")
        f.write(output)
        f.close()
        time.sleep(5)

        logfile = open('log.txt', encoding="utf8")
        logid3 = logfile.read()
        logfile.close
        if logid2 != logid3:
            exit()

        output = ("震源は" + 震源地 + "　深さ" + 深さ + "　マグニッチュード" + 規模)
        print(output)
        f = open("output.txt", "w",encoding="utf8")
        f.write(output)
        f.close()
        time.sleep(8)

        logfile = open('log.txt', encoding="utf8")
        logid3 = logfile.read()
        logfile.close
        if logid2 != logid3:
            exit()

    elif 情報種類 == ("ScaleAndDestination"):
        #地震情報(各地の震度)
        print("地震情報")

        output = ("地震情報")
        print(output)
        f = open("output.txt", "w",encoding="utf8")
        f.write(output)
        f.close()
        time.sleep(2)

        logfile = open('log.txt', encoding="utf8")
        logid3 = logfile.read()
        logfile.close
        if logid2 != logid3:
            exit()

        output = (発生日時 + "頃地震がありました")
        print(output)
        f = open("output.txt", "w",encoding="utf8")
        f.write(output)
        f.close()
        time.sleep(5)

        logfile = open('log.txt', encoding="utf8")
        logid3 = logfile.read()
        logfile.close
        if logid2 != logid3:
            exit()

        output = (津波情報)
        print(output)
        f = open("output.txt", "w",encoding="utf8")
        f.write(output)
        f.close()
        time.sleep(5)

        logfile = open('log.txt', encoding="utf8")
        logid3 = logfile.read()
        logfile.close
        if logid2 != logid3:
            exit()

        output = ("震源は" + 震源地 + "　深さ" + 深さ + "　マグニッチュード" + 規模)
        print(output)
        f = open("output.txt", "w",encoding="utf8")
        f.write(output)
        f.close()
        time.sleep(8)

        logfile = open('log.txt', encoding="utf8")
        logid3 = logfile.read()
        logfile.close
        if logid2 != logid3:
            exit()

    elif 情報種類 == ("Destination"):
        #震源情報
        print("震源情報")

        output = ("地震情報")
        print(output)
        f = open("output.txt", "w",encoding="utf8")
        f.write(output)
        f.close()
        time.sleep(2)

        logfile = open('log.txt', encoding="utf8")
        logid3 = logfile.read()
        logfile.close
        if logid2 != logid3:
            exit()

        output = (発生日時 + "頃地震がありました")
        print(output)
        f = open("output.txt", "w",encoding="utf8")
        f.write(output)
        f.close()
        time.sleep(5)

        logfile = open('log.txt', encoding="utf8")
        logid3 = logfile.read()
        logfile.close
        if logid2 != logid3:
            exit()

        output = (津波情報)
        print(output)
        f = open("output.txt", "w",encoding="utf8")
        f.write(output)
        f.close()
        time.sleep(5)

        logfile = open('log.txt', encoding="utf8")
        logid3 = logfile.read()
        logfile.close
        if logid2 != logid3:
            exit()

        output = ("震源は" + 震源地 + "　深さ" + 深さ + "　マグニッチュード" + 規模)
        print(output)
        f = open("output.txt", "w",encoding="utf8")
        f.write(output)
        f.close()
        time.sleep(8)

        logfile = open('log.txt', encoding="utf8")
        logid3 = logfile.read()
        logfile.close
        if logid2 != logid3:
            exit()


    elif 情報種類 == ("ScalePrompt"):
        #震度速報
        print("震度速報")

        output = ("地震情報")
        print(output)
        f = open("output.txt", "w",encoding="utf8")
        f.write(output)
        f.close()
        time.sleep(2)

        logfile = open('log.txt', encoding="utf8")
        logid3 = logfile.read()
        logfile.close
        if logid2 != logid3:
            exit()

        output = (発生日時 + "頃　" + pref + "地方で" + 強さ + "地震がありました")
        print(output)
        f = open("output.txt", "w",encoding="utf8")
        f.write(output)
        f.close()
        time.sleep(5)

        logfile = open('log.txt', encoding="utf8")
        logid3 = logfile.read()
        logfile.close
        if logid2 != logid3:
            exit()

    elif 情報種類 == ("Foreign"):
        #遠地地震
        print("遠地地震")

        output = ("地震情報")
        print(output)
        f = open("output.txt", "w",encoding="utf8")
        f.write(output)
        f.close()
        time.sleep(2)

        logfile = open('log.txt', encoding="utf8")
        logid3 = logfile.read()
        logfile.close
        if logid2 != logid3:
            exit()

        output = (発生日時 + "頃　海外で強い地震がありました")
        print(output)
        f = open("output.txt", "w",encoding="utf8")
        f.write(output)
        f.close()
        time.sleep(5)
        
        logfile = open('log.txt', encoding="utf8")
        logid3 = logfile.read()
        logfile.close
        if logid2 != logid3:
            exit()

        output = (津波情報)
        print(output)
        f = open("output.txt", "w",encoding="utf8")
        f.write(output)
        f.close()
        time.sleep(5)

        logfile = open('log.txt', encoding="utf8")
        logid3 = logfile.read()
        logfile.close
        if logid2 != logid3:
            exit()

        output = ("震源は" + 震源地 + "　深さ" + 深さ + "　マグニッチュード" + 規模)
        print(output)
        f = open("output.txt", "w",encoding="utf8")
        f.write(output)
        f.close()
        time.sleep(8)

        logfile = open('log.txt', encoding="utf8")
        logid3 = logfile.read()
        logfile.close
        if logid2 != logid3:
            exit()


    for j in range(0,10):
        scale(j)


f = open("output.txt", "w",encoding="utf8")
f.write("")
f.close()
#清空輸出資料
exit()